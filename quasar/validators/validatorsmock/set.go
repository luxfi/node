// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luxfi/node/consensus/validators (interfaces: Set)
//
// Generated by this command:
//
//	mockgen -package=validatorsmock -destination=validatorsmock/set.go -mock_names=Set=Set . Set
//

// Package validatorsmock is a generated GoMock package.
package validatorsmock

import (
	reflect "reflect"

	ids "github.com/luxfi/ids"
	validators "github.com/luxfi/node/consensus/validators"
	gomock "go.uber.org/mock/gomock"
)

// Set is a mock of Set interface.
type Set struct {
	ctrl     *gomock.Controller
	recorder *SetMockRecorder
	isgomock struct{}
}

// SetMockRecorder is the mock recorder for Set.
type SetMockRecorder struct {
	mock *Set
}

// NewSet creates a new mock instance.
func NewSet(ctrl *gomock.Controller) *Set {
	mock := &Set{ctrl: ctrl}
	mock.recorder = &SetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Set) EXPECT() *SetMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *Set) Add(nodeID ids.NodeID, pk []byte, weight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", nodeID, pk, weight)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *SetMockRecorder) Add(nodeID, pk, weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*Set)(nil).Add), nodeID, pk, weight)
}

// AddWeight mocks base method.
func (m *Set) AddWeight(nodeID ids.NodeID, weight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWeight", nodeID, weight)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWeight indicates an expected call of AddWeight.
func (mr *SetMockRecorder) AddWeight(nodeID, weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWeight", reflect.TypeOf((*Set)(nil).AddWeight), nodeID, weight)
}

// Contains mocks base method.
func (m *Set) Contains(nodeID ids.NodeID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", nodeID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *SetMockRecorder) Contains(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*Set)(nil).Contains), nodeID)
}

// Get mocks base method.
func (m *Set) Get(nodeID ids.NodeID) (*validators.Validator, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", nodeID)
	ret0, _ := ret[0].(*validators.Validator)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *SetMockRecorder) Get(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Set)(nil).Get), nodeID)
}

// Len mocks base method.
func (m *Set) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *SetMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*Set)(nil).Len))
}

// List mocks base method.
func (m *Set) List() []*validators.Validator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*validators.Validator)
	return ret0
}

// List indicates an expected call of List.
func (mr *SetMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Set)(nil).List))
}

// Remove mocks base method.
func (m *Set) Remove(nodeID ids.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *SetMockRecorder) Remove(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*Set)(nil).Remove), nodeID)
}

// RemoveWeight mocks base method.
func (m *Set) RemoveWeight(nodeID ids.NodeID, weight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWeight", nodeID, weight)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWeight indicates an expected call of RemoveWeight.
func (mr *SetMockRecorder) RemoveWeight(nodeID, weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWeight", reflect.TypeOf((*Set)(nil).RemoveWeight), nodeID, weight)
}

// Sample mocks base method.
func (m *Set) Sample(seed uint64) (ids.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sample", seed)
	ret0, _ := ret[0].(ids.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sample indicates an expected call of Sample.
func (mr *SetMockRecorder) Sample(seed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sample", reflect.TypeOf((*Set)(nil).Sample), seed)
}

// String mocks base method.
func (m *Set) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *SetMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*Set)(nil).String))
}

// Weight mocks base method.
func (m *Set) Weight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Weight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Weight indicates an expected call of Weight.
func (mr *SetMockRecorder) Weight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Weight", reflect.TypeOf((*Set)(nil).Weight))
}
