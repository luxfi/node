// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luxfi/node/quasar/validators (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -package=validatorsmock -destination=validatorsmock/manager.go -mock_names=Manager=Manager . Manager
//

// Package validatorsmock is a generated GoMock package.
package validatorsmock

import (
	reflect "reflect"

	ids "github.com/luxfi/ids"
	validators "github.com/luxfi/node/quasar/validators"
	gomock "go.uber.org/mock/gomock"
)

// Manager is a mock of Manager interface.
type Manager struct {
	ctrl     *gomock.Controller
	recorder *ManagerMockRecorder
	isgomock struct{}
}

// ManagerMockRecorder is the mock recorder for Manager.
type ManagerMockRecorder struct {
	mock *Manager
}

// NewManager creates a new mock instance.
func NewManager(ctrl *gomock.Controller) *Manager {
	mock := &Manager{ctrl: ctrl}
	mock.recorder = &ManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Manager) EXPECT() *ManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *Manager) Add(subnetID ids.ID, arg1 validators.Set) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", subnetID, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *ManagerMockRecorder) Add(subnetID, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*Manager)(nil).Add), subnetID, arg1)
}

// Contains mocks base method.
func (m *Manager) Contains(subnetID ids.ID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", subnetID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *ManagerMockRecorder) Contains(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*Manager)(nil).Contains), subnetID)
}

// Count mocks base method.
func (m *Manager) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *ManagerMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*Manager)(nil).Count))
}

// Get mocks base method.
func (m *Manager) Get(subnetID ids.ID) (validators.Set, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", subnetID)
	ret0, _ := ret[0].(validators.Set)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *ManagerMockRecorder) Get(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Manager)(nil).Get), subnetID)
}

// GetByWeight mocks base method.
func (m *Manager) GetByWeight(subnetID ids.ID, minWeight uint64) (validators.Set, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByWeight", subnetID, minWeight)
	ret0, _ := ret[0].(validators.Set)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByWeight indicates an expected call of GetByWeight.
func (mr *ManagerMockRecorder) GetByWeight(subnetID, minWeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByWeight", reflect.TypeOf((*Manager)(nil).GetByWeight), subnetID, minWeight)
}

// GetValidator mocks base method.
func (m *Manager) GetValidator(subnetID ids.ID, nodeID ids.NodeID) (*validators.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidator", subnetID, nodeID)
	ret0, _ := ret[0].(*validators.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidator indicates an expected call of GetValidator.
func (mr *ManagerMockRecorder) GetValidator(subnetID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*Manager)(nil).GetValidator), subnetID, nodeID)
}

// GetWeight mocks base method.
func (m *Manager) GetWeight(subnetID ids.ID, nodeID ids.NodeID) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeight", subnetID, nodeID)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetWeight indicates an expected call of GetWeight.
func (mr *ManagerMockRecorder) GetWeight(subnetID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeight", reflect.TypeOf((*Manager)(nil).GetWeight), subnetID, nodeID)
}

// RecalculateStakes mocks base method.
func (m *Manager) RecalculateStakes(subnetID ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecalculateStakes", subnetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecalculateStakes indicates an expected call of RecalculateStakes.
func (mr *ManagerMockRecorder) RecalculateStakes(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecalculateStakes", reflect.TypeOf((*Manager)(nil).RecalculateStakes), subnetID)
}

// Remove mocks base method.
func (m *Manager) Remove(subnetID ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", subnetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *ManagerMockRecorder) Remove(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*Manager)(nil).Remove), subnetID)
}

// String mocks base method.
func (m *Manager) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *ManagerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*Manager)(nil).String))
}

// TotalWeight mocks base method.
func (m *Manager) TotalWeight(subnetID ids.ID) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalWeight", subnetID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalWeight indicates an expected call of TotalWeight.
func (mr *ManagerMockRecorder) TotalWeight(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalWeight", reflect.TypeOf((*Manager)(nil).TotalWeight), subnetID)
}
