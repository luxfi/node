// Code generated by MockGen. DO NOT EDIT.
// Source: quasar/validators/manager.go
//
// Generated by this command:
//
//	mockgen -source=quasar/validators/manager.go -destination=quasar/validators/validatorsmock/mock_state.go -package=validatorsmock State
//

// Package validatorsmock is a generated GoMock package.
package validatorsmock

import (
	context "context"
	reflect "reflect"

	bls "github.com/luxfi/crypto/bls"
	ids "github.com/luxfi/ids"
	validators "github.com/luxfi/node/quasar/validators"
	version "github.com/luxfi/node/version"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
	isgomock struct{}
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ApplyValidatorPublicKeyDiffs mocks base method.
func (m *MockState) ApplyValidatorPublicKeyDiffs(ctx context.Context, arg1 map[ids.NodeID]*validators.GetValidatorOutput, startHeight, endHeight uint64, subnetID ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyValidatorPublicKeyDiffs", ctx, arg1, startHeight, endHeight, subnetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyValidatorPublicKeyDiffs indicates an expected call of ApplyValidatorPublicKeyDiffs.
func (mr *MockStateMockRecorder) ApplyValidatorPublicKeyDiffs(ctx, arg1, startHeight, endHeight, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyValidatorPublicKeyDiffs", reflect.TypeOf((*MockState)(nil).ApplyValidatorPublicKeyDiffs), ctx, arg1, startHeight, endHeight, subnetID)
}

// ApplyValidatorWeightDiffs mocks base method.
func (m *MockState) ApplyValidatorWeightDiffs(ctx context.Context, arg1 map[ids.NodeID]*validators.GetValidatorOutput, startHeight, endHeight uint64, subnetID ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyValidatorWeightDiffs", ctx, arg1, startHeight, endHeight, subnetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyValidatorWeightDiffs indicates an expected call of ApplyValidatorWeightDiffs.
func (mr *MockStateMockRecorder) ApplyValidatorWeightDiffs(ctx, arg1, startHeight, endHeight, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyValidatorWeightDiffs", reflect.TypeOf((*MockState)(nil).ApplyValidatorWeightDiffs), ctx, arg1, startHeight, endHeight, subnetID)
}

// GetCurrentHeight mocks base method.
func (m *MockState) GetCurrentHeight(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentHeight", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentHeight indicates an expected call of GetCurrentHeight.
func (mr *MockStateMockRecorder) GetCurrentHeight(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentHeight", reflect.TypeOf((*MockState)(nil).GetCurrentHeight), ctx)
}

// GetCurrentValidatorSet mocks base method.
func (m *MockState) GetCurrentValidatorSet(ctx context.Context, subnetID ids.ID) (map[ids.ID]*validators.GetCurrentValidatorOutput, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentValidatorSet", ctx, subnetID)
	ret0, _ := ret[0].(map[ids.ID]*validators.GetCurrentValidatorOutput)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCurrentValidatorSet indicates an expected call of GetCurrentValidatorSet.
func (mr *MockStateMockRecorder) GetCurrentValidatorSet(ctx, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentValidatorSet", reflect.TypeOf((*MockState)(nil).GetCurrentValidatorSet), ctx, subnetID)
}

// GetMinimumHeight mocks base method.
func (m *MockState) GetMinimumHeight(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinimumHeight", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMinimumHeight indicates an expected call of GetMinimumHeight.
func (mr *MockStateMockRecorder) GetMinimumHeight(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinimumHeight", reflect.TypeOf((*MockState)(nil).GetMinimumHeight), ctx)
}

// GetSubnetID mocks base method.
func (m *MockState) GetSubnetID(ctx context.Context, chainID ids.ID) (ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnetID", ctx, chainID)
	ret0, _ := ret[0].(ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnetID indicates an expected call of GetSubnetID.
func (mr *MockStateMockRecorder) GetSubnetID(ctx, chainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnetID", reflect.TypeOf((*MockState)(nil).GetSubnetID), ctx, chainID)
}

// GetValidatorSet mocks base method.
func (m *MockState) GetValidatorSet(ctx context.Context, height uint64, subnetID ids.ID) (map[ids.NodeID]*validators.GetValidatorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSet", ctx, height, subnetID)
	ret0, _ := ret[0].(map[ids.NodeID]*validators.GetValidatorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorSet indicates an expected call of GetValidatorSet.
func (mr *MockStateMockRecorder) GetValidatorSet(ctx, height, subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSet", reflect.TypeOf((*MockState)(nil).GetValidatorSet), ctx, height, subnetID)
}

// MockSet is a mock of Set interface.
type MockSet struct {
	ctrl     *gomock.Controller
	recorder *MockSetMockRecorder
	isgomock struct{}
}

// MockSetMockRecorder is the mock recorder for MockSet.
type MockSetMockRecorder struct {
	mock *MockSet
}

// NewMockSet creates a new mock instance.
func NewMockSet(ctrl *gomock.Controller) *MockSet {
	mock := &MockSet{ctrl: ctrl}
	mock.recorder = &MockSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSet) EXPECT() *MockSetMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSet) Add(nodeID ids.NodeID, pk []byte, weight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", nodeID, pk, weight)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockSetMockRecorder) Add(nodeID, pk, weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSet)(nil).Add), nodeID, pk, weight)
}

// AddWeight mocks base method.
func (m *MockSet) AddWeight(nodeID ids.NodeID, weight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWeight", nodeID, weight)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWeight indicates an expected call of AddWeight.
func (mr *MockSetMockRecorder) AddWeight(nodeID, weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWeight", reflect.TypeOf((*MockSet)(nil).AddWeight), nodeID, weight)
}

// Contains mocks base method.
func (m *MockSet) Contains(nodeID ids.NodeID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", nodeID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockSetMockRecorder) Contains(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockSet)(nil).Contains), nodeID)
}

// Get mocks base method.
func (m *MockSet) Get(nodeID ids.NodeID) (*validators.Validator, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", nodeID)
	ret0, _ := ret[0].(*validators.Validator)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSetMockRecorder) Get(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSet)(nil).Get), nodeID)
}

// GetMap mocks base method.
func (m *MockSet) GetMap() map[ids.NodeID]*validators.Validator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMap")
	ret0, _ := ret[0].(map[ids.NodeID]*validators.Validator)
	return ret0
}

// GetMap indicates an expected call of GetMap.
func (mr *MockSetMockRecorder) GetMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMap", reflect.TypeOf((*MockSet)(nil).GetMap))
}

// Len mocks base method.
func (m *MockSet) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockSetMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockSet)(nil).Len))
}

// List mocks base method.
func (m *MockSet) List() []*validators.Validator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*validators.Validator)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockSetMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSet)(nil).List))
}

// Remove mocks base method.
func (m *MockSet) Remove(nodeID ids.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockSetMockRecorder) Remove(nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockSet)(nil).Remove), nodeID)
}

// RemoveWeight mocks base method.
func (m *MockSet) RemoveWeight(nodeID ids.NodeID, weight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWeight", nodeID, weight)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWeight indicates an expected call of RemoveWeight.
func (mr *MockSetMockRecorder) RemoveWeight(nodeID, weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWeight", reflect.TypeOf((*MockSet)(nil).RemoveWeight), nodeID, weight)
}

// Sample mocks base method.
func (m *MockSet) Sample(seed uint64) (ids.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sample", seed)
	ret0, _ := ret[0].(ids.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sample indicates an expected call of Sample.
func (mr *MockSetMockRecorder) Sample(seed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sample", reflect.TypeOf((*MockSet)(nil).Sample), seed)
}

// String mocks base method.
func (m *MockSet) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockSetMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockSet)(nil).String))
}

// Weight mocks base method.
func (m *MockSet) Weight() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Weight")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Weight indicates an expected call of Weight.
func (mr *MockSetMockRecorder) Weight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Weight", reflect.TypeOf((*MockSet)(nil).Weight))
}

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockManager) Add(subnetID ids.ID, arg1 validators.Set) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", subnetID, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockManagerMockRecorder) Add(subnetID, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockManager)(nil).Add), subnetID, arg1)
}

// AddStaker mocks base method.
func (m *MockManager) AddStaker(subnetID ids.ID, nodeID ids.NodeID, pk *bls.PublicKey, txID ids.ID, weight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStaker", subnetID, nodeID, pk, txID, weight)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStaker indicates an expected call of AddStaker.
func (mr *MockManagerMockRecorder) AddStaker(subnetID, nodeID, pk, txID, weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStaker", reflect.TypeOf((*MockManager)(nil).AddStaker), subnetID, nodeID, pk, txID, weight)
}

// AddWeight mocks base method.
func (m *MockManager) AddWeight(subnetID ids.ID, nodeID ids.NodeID, weight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWeight", subnetID, nodeID, weight)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWeight indicates an expected call of AddWeight.
func (mr *MockManagerMockRecorder) AddWeight(subnetID, nodeID, weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWeight", reflect.TypeOf((*MockManager)(nil).AddWeight), subnetID, nodeID, weight)
}

// Contains mocks base method.
func (m *MockManager) Contains(subnetID ids.ID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", subnetID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockManagerMockRecorder) Contains(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockManager)(nil).Contains), subnetID)
}

// Count mocks base method.
func (m *MockManager) Count() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockManagerMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockManager)(nil).Count))
}

// Get mocks base method.
func (m *MockManager) Get(subnetID ids.ID) (validators.Set, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", subnetID)
	ret0, _ := ret[0].(validators.Set)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockManagerMockRecorder) Get(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockManager)(nil).Get), subnetID)
}

// GetByWeight mocks base method.
func (m *MockManager) GetByWeight(subnetID ids.ID, minWeight uint64) (validators.Set, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByWeight", subnetID, minWeight)
	ret0, _ := ret[0].(validators.Set)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetByWeight indicates an expected call of GetByWeight.
func (mr *MockManagerMockRecorder) GetByWeight(subnetID, minWeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByWeight", reflect.TypeOf((*MockManager)(nil).GetByWeight), subnetID, minWeight)
}

// GetMap mocks base method.
func (m *MockManager) GetMap(subnetID ids.ID) map[ids.NodeID]*validators.Validator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMap", subnetID)
	ret0, _ := ret[0].(map[ids.NodeID]*validators.Validator)
	return ret0
}

// GetMap indicates an expected call of GetMap.
func (mr *MockManagerMockRecorder) GetMap(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMap", reflect.TypeOf((*MockManager)(nil).GetMap), subnetID)
}

// GetValidator mocks base method.
func (m *MockManager) GetValidator(subnetID ids.ID, nodeID ids.NodeID) (*validators.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidator", subnetID, nodeID)
	ret0, _ := ret[0].(*validators.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidator indicates an expected call of GetValidator.
func (mr *MockManagerMockRecorder) GetValidator(subnetID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidator", reflect.TypeOf((*MockManager)(nil).GetValidator), subnetID, nodeID)
}

// GetValidatorIDs mocks base method.
func (m *MockManager) GetValidatorIDs(subnetID ids.ID) []ids.NodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorIDs", subnetID)
	ret0, _ := ret[0].([]ids.NodeID)
	return ret0
}

// GetValidatorIDs indicates an expected call of GetValidatorIDs.
func (mr *MockManagerMockRecorder) GetValidatorIDs(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorIDs", reflect.TypeOf((*MockManager)(nil).GetValidatorIDs), subnetID)
}

// GetWeight mocks base method.
func (m *MockManager) GetWeight(subnetID ids.ID, nodeID ids.NodeID) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeight", subnetID, nodeID)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetWeight indicates an expected call of GetWeight.
func (mr *MockManagerMockRecorder) GetWeight(subnetID, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeight", reflect.TypeOf((*MockManager)(nil).GetWeight), subnetID, nodeID)
}

// NumSubnets mocks base method.
func (m *MockManager) NumSubnets() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumSubnets")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumSubnets indicates an expected call of NumSubnets.
func (mr *MockManagerMockRecorder) NumSubnets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumSubnets", reflect.TypeOf((*MockManager)(nil).NumSubnets))
}

// RecalculateStakes mocks base method.
func (m *MockManager) RecalculateStakes(subnetID ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecalculateStakes", subnetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecalculateStakes indicates an expected call of RecalculateStakes.
func (mr *MockManagerMockRecorder) RecalculateStakes(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecalculateStakes", reflect.TypeOf((*MockManager)(nil).RecalculateStakes), subnetID)
}

// RegisterSetCallbackListener mocks base method.
func (m *MockManager) RegisterSetCallbackListener(subnetID ids.ID, listener validators.SetCallbackListener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterSetCallbackListener", subnetID, listener)
}

// RegisterSetCallbackListener indicates an expected call of RegisterSetCallbackListener.
func (mr *MockManagerMockRecorder) RegisterSetCallbackListener(subnetID, listener any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSetCallbackListener", reflect.TypeOf((*MockManager)(nil).RegisterSetCallbackListener), subnetID, listener)
}

// Remove mocks base method.
func (m *MockManager) Remove(subnetID ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", subnetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockManagerMockRecorder) Remove(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockManager)(nil).Remove), subnetID)
}

// RemoveWeight mocks base method.
func (m *MockManager) RemoveWeight(subnetID ids.ID, nodeID ids.NodeID, weight uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWeight", subnetID, nodeID, weight)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWeight indicates an expected call of RemoveWeight.
func (mr *MockManagerMockRecorder) RemoveWeight(subnetID, nodeID, weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWeight", reflect.TypeOf((*MockManager)(nil).RemoveWeight), subnetID, nodeID, weight)
}

// String mocks base method.
func (m *MockManager) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockManagerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockManager)(nil).String))
}

// TotalWeight mocks base method.
func (m *MockManager) TotalWeight(subnetID ids.ID) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalWeight", subnetID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalWeight indicates an expected call of TotalWeight.
func (mr *MockManagerMockRecorder) TotalWeight(subnetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalWeight", reflect.TypeOf((*MockManager)(nil).TotalWeight), subnetID)
}

// MockSetCallbackListener is a mock of SetCallbackListener interface.
type MockSetCallbackListener struct {
	ctrl     *gomock.Controller
	recorder *MockSetCallbackListenerMockRecorder
	isgomock struct{}
}

// MockSetCallbackListenerMockRecorder is the mock recorder for MockSetCallbackListener.
type MockSetCallbackListenerMockRecorder struct {
	mock *MockSetCallbackListener
}

// NewMockSetCallbackListener creates a new mock instance.
func NewMockSetCallbackListener(ctrl *gomock.Controller) *MockSetCallbackListener {
	mock := &MockSetCallbackListener{ctrl: ctrl}
	mock.recorder = &MockSetCallbackListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetCallbackListener) EXPECT() *MockSetCallbackListenerMockRecorder {
	return m.recorder
}

// OnValidatorAdded mocks base method.
func (m *MockSetCallbackListener) OnValidatorAdded(nodeID ids.NodeID, pk *bls.PublicKey, txID ids.ID, weight uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnValidatorAdded", nodeID, pk, txID, weight)
}

// OnValidatorAdded indicates an expected call of OnValidatorAdded.
func (mr *MockSetCallbackListenerMockRecorder) OnValidatorAdded(nodeID, pk, txID, weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnValidatorAdded", reflect.TypeOf((*MockSetCallbackListener)(nil).OnValidatorAdded), nodeID, pk, txID, weight)
}

// OnValidatorRemoved mocks base method.
func (m *MockSetCallbackListener) OnValidatorRemoved(nodeID ids.NodeID, weight uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnValidatorRemoved", nodeID, weight)
}

// OnValidatorRemoved indicates an expected call of OnValidatorRemoved.
func (mr *MockSetCallbackListenerMockRecorder) OnValidatorRemoved(nodeID, weight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnValidatorRemoved", reflect.TypeOf((*MockSetCallbackListener)(nil).OnValidatorRemoved), nodeID, weight)
}

// OnValidatorWeightChanged mocks base method.
func (m *MockSetCallbackListener) OnValidatorWeightChanged(nodeID ids.NodeID, oldWeight, newWeight uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnValidatorWeightChanged", nodeID, oldWeight, newWeight)
}

// OnValidatorWeightChanged indicates an expected call of OnValidatorWeightChanged.
func (mr *MockSetCallbackListenerMockRecorder) OnValidatorWeightChanged(nodeID, oldWeight, newWeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnValidatorWeightChanged", reflect.TypeOf((*MockSetCallbackListener)(nil).OnValidatorWeightChanged), nodeID, oldWeight, newWeight)
}

// MockConnector is a mock of Connector interface.
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
	isgomock struct{}
}

// MockConnectorMockRecorder is the mock recorder for MockConnector.
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance.
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// Connected mocks base method.
func (m *MockConnector) Connected(ctx context.Context, nodeID ids.NodeID, nodeVersion *version.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connected", ctx, nodeID, nodeVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connected indicates an expected call of Connected.
func (mr *MockConnectorMockRecorder) Connected(ctx, nodeID, nodeVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connected", reflect.TypeOf((*MockConnector)(nil).Connected), ctx, nodeID, nodeVersion)
}

// Disconnected mocks base method.
func (m *MockConnector) Disconnected(ctx context.Context, nodeID ids.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnected", ctx, nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnected indicates an expected call of Disconnected.
func (mr *MockConnectorMockRecorder) Disconnected(ctx, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnected", reflect.TypeOf((*MockConnector)(nil).Disconnected), ctx, nodeID)
}
