// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luxfi/node/quasar/engine/dag/vertex (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -package=vertexmock -destination=vertexmock/storage.go -mock_names=Storage=Storage . Storage
//

// Package vertexmock is a generated GoMock package.
package vertexmock

import (
	context "context"
	reflect "reflect"

	ids "github.com/luxfi/ids"
	vertex "github.com/luxfi/node/v2/quasar/engine/dag/vertex"
	gomock "go.uber.org/mock/gomock"
)

// Storage is a mock of Storage interface.
type Storage struct {
	ctrl     *gomock.Controller
	recorder *StorageMockRecorder
	isgomock struct{}
}

// StorageMockRecorder is the mock recorder for Storage.
type StorageMockRecorder struct {
	mock *Storage
}

// NewStorage creates a new mock instance.
func NewStorage(ctrl *gomock.Controller) *Storage {
	mock := &Storage{ctrl: ctrl}
	mock.recorder = &StorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Storage) EXPECT() *StorageMockRecorder {
	return m.recorder
}

// GetVertex mocks base method.
func (m *Storage) GetVertex(ctx context.Context, vertexID ids.ID) (vertex.Vertex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVertex", ctx, vertexID)
	ret0, _ := ret[0].(vertex.Vertex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVertex indicates an expected call of GetVertex.
func (mr *StorageMockRecorder) GetVertex(ctx, vertexID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVertex", reflect.TypeOf((*Storage)(nil).GetVertex), ctx, vertexID)
}

// RemoveVertex mocks base method.
func (m *Storage) RemoveVertex(ctx context.Context, vertexID ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVertex", ctx, vertexID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVertex indicates an expected call of RemoveVertex.
func (mr *StorageMockRecorder) RemoveVertex(ctx, vertexID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVertex", reflect.TypeOf((*Storage)(nil).RemoveVertex), ctx, vertexID)
}

// StoreVertex mocks base method.
func (m *Storage) StoreVertex(ctx context.Context, arg1 vertex.Vertex) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreVertex", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreVertex indicates an expected call of StoreVertex.
func (mr *StorageMockRecorder) StoreVertex(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreVertex", reflect.TypeOf((*Storage)(nil).StoreVertex), ctx, arg1)
}

// VertexIDs mocks base method.
func (m *Storage) VertexIDs(ctx context.Context) ([]ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VertexIDs", ctx)
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VertexIDs indicates an expected call of VertexIDs.
func (mr *StorageMockRecorder) VertexIDs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VertexIDs", reflect.TypeOf((*Storage)(nil).VertexIDs), ctx)
}
