// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luxfi/node/quasar/engine/dag/vertex (interfaces: Vertex)
//
// Generated by this command:
//
//	mockgen -package=vertexmock -destination=vertexmock/vertex.go -mock_names=Vertex=Vertex . Vertex
//

// Package vertexmock is a generated GoMock package.
package vertexmock

import (
	context "context"
	reflect "reflect"

	ids "github.com/luxfi/ids"
	choices "github.com/luxfi/node/quasar/choices"
	gomock "go.uber.org/mock/gomock"
)

// Vertex is a mock of Vertex interface.
type Vertex struct {
	ctrl     *gomock.Controller
	recorder *VertexMockRecorder
	isgomock struct{}
}

// VertexMockRecorder is the mock recorder for Vertex.
type VertexMockRecorder struct {
	mock *Vertex
}

// NewVertex creates a new mock instance.
func NewVertex(ctrl *gomock.Controller) *Vertex {
	mock := &Vertex{ctrl: ctrl}
	mock.recorder = &VertexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Vertex) EXPECT() *VertexMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *Vertex) Accept() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept")
	ret0, _ := ret[0].(error)
	return ret0
}

// Accept indicates an expected call of Accept.
func (mr *VertexMockRecorder) Accept() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*Vertex)(nil).Accept))
}

// Bytes mocks base method.
func (m *Vertex) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *VertexMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*Vertex)(nil).Bytes))
}

// Epoch mocks base method.
func (m *Vertex) Epoch() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Epoch")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Epoch indicates an expected call of Epoch.
func (mr *VertexMockRecorder) Epoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Epoch", reflect.TypeOf((*Vertex)(nil).Epoch))
}

// Height mocks base method.
func (m *Vertex) Height() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Height indicates an expected call of Height.
func (mr *VertexMockRecorder) Height() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*Vertex)(nil).Height))
}

// ID mocks base method.
func (m *Vertex) ID() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *VertexMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*Vertex)(nil).ID))
}

// Parents mocks base method.
func (m *Vertex) Parents() ([]ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parents")
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parents indicates an expected call of Parents.
func (mr *VertexMockRecorder) Parents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parents", reflect.TypeOf((*Vertex)(nil).Parents))
}

// Reject mocks base method.
func (m *Vertex) Reject() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reject")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reject indicates an expected call of Reject.
func (mr *VertexMockRecorder) Reject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*Vertex)(nil).Reject))
}

// Status mocks base method.
func (m *Vertex) Status() choices.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(choices.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *VertexMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*Vertex)(nil).Status))
}

// Timestamp mocks base method.
func (m *Vertex) Timestamp() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Timestamp indicates an expected call of Timestamp.
func (mr *VertexMockRecorder) Timestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*Vertex)(nil).Timestamp))
}

// Verify mocks base method.
func (m *Vertex) Verify(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *VertexMockRecorder) Verify(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*Vertex)(nil).Verify), arg0)
}
