// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luxfi/node/consensus/engine/dag/vertex (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -package=vertexmock -destination=vertexmock/manager.go -mock_names=Manager=Manager . Manager
//

// Package vertexmock is a generated GoMock package.
package vertexmock

import (
	context "context"
	reflect "reflect"

	ids "github.com/luxfi/ids"
	vertex "github.com/luxfi/node/consensus/engine/dag/vertex"
	gomock "go.uber.org/mock/gomock"
)

// Manager is a mock of Manager interface.
type Manager struct {
	ctrl     *gomock.Controller
	recorder *ManagerMockRecorder
	isgomock struct{}
}

// ManagerMockRecorder is the mock recorder for Manager.
type ManagerMockRecorder struct {
	mock *Manager
}

// NewManager creates a new mock instance.
func NewManager(ctrl *gomock.Controller) *Manager {
	mock := &Manager{ctrl: ctrl}
	mock.recorder = &ManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Manager) EXPECT() *ManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *Manager) Add(arg0 context.Context, arg1 vertex.Vertex) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *ManagerMockRecorder) Add(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*Manager)(nil).Add), arg0, arg1)
}

// Edge mocks base method.
func (m *Manager) Edge(arg0 context.Context) []ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edge", arg0)
	ret0, _ := ret[0].([]ids.ID)
	return ret0
}

// Edge indicates an expected call of Edge.
func (mr *ManagerMockRecorder) Edge(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edge", reflect.TypeOf((*Manager)(nil).Edge), arg0)
}

// Get mocks base method.
func (m *Manager) Get(arg0 context.Context, arg1 ids.ID) (vertex.Vertex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(vertex.Vertex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *ManagerMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Manager)(nil).Get), arg0, arg1)
}

// GetAncestors mocks base method.
func (m *Manager) GetAncestors(arg0 context.Context, arg1 ids.ID) ([]vertex.Vertex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAncestors", arg0, arg1)
	ret0, _ := ret[0].([]vertex.Vertex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAncestors indicates an expected call of GetAncestors.
func (mr *ManagerMockRecorder) GetAncestors(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAncestors", reflect.TypeOf((*Manager)(nil).GetAncestors), arg0, arg1)
}

// GetVertex mocks base method.
func (m *Manager) GetVertex(ctx context.Context, vertexID ids.ID) (vertex.Vertex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVertex", ctx, vertexID)
	ret0, _ := ret[0].(vertex.Vertex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVertex indicates an expected call of GetVertex.
func (mr *ManagerMockRecorder) GetVertex(ctx, vertexID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVertex", reflect.TypeOf((*Manager)(nil).GetVertex), ctx, vertexID)
}

// RemoveVertex mocks base method.
func (m *Manager) RemoveVertex(ctx context.Context, vertexID ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVertex", ctx, vertexID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVertex indicates an expected call of RemoveVertex.
func (mr *ManagerMockRecorder) RemoveVertex(ctx, vertexID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVertex", reflect.TypeOf((*Manager)(nil).RemoveVertex), ctx, vertexID)
}

// StopVertex mocks base method.
func (m *Manager) StopVertex(arg0 context.Context, arg1 ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopVertex", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopVertex indicates an expected call of StopVertex.
func (mr *ManagerMockRecorder) StopVertex(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopVertex", reflect.TypeOf((*Manager)(nil).StopVertex), arg0, arg1)
}

// StoreVertex mocks base method.
func (m *Manager) StoreVertex(ctx context.Context, arg1 vertex.Vertex) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreVertex", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreVertex indicates an expected call of StoreVertex.
func (mr *ManagerMockRecorder) StoreVertex(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreVertex", reflect.TypeOf((*Manager)(nil).StoreVertex), ctx, arg1)
}

// VertexIDs mocks base method.
func (m *Manager) VertexIDs(ctx context.Context) ([]ids.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VertexIDs", ctx)
	ret0, _ := ret[0].([]ids.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VertexIDs indicates an expected call of VertexIDs.
func (mr *ManagerMockRecorder) VertexIDs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VertexIDs", reflect.TypeOf((*Manager)(nil).VertexIDs), ctx)
}
