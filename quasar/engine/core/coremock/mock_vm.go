// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luxfi/node/quasar/engine/core (interfaces: VM)

// Package coremock is a generated GoMock package.
package coremock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	core "github.com/luxfi/node/quasar/engine/core"
)

// MockVM is a mock of VM interface.
type MockVM struct {
	ctrl     *gomock.Controller
	recorder *MockVMMockRecorder
}

// MockVMMockRecorder is the mock recorder for MockVM.
type MockVMMockRecorder struct {
	mock *MockVM
}

// NewMockVM creates a new mock instance.
func NewMockVM(ctrl *gomock.Controller) *MockVM {
	mock := &MockVM{ctrl: ctrl}
	mock.recorder = &MockVMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVM) EXPECT() *MockVMMockRecorder {
	return m.recorder
}

// Initialize mocks base method.
func (m *MockVM) Initialize(ctx context.Context, chainCtx *core.Context, dbManager interface{}, genesisBytes []byte, upgradeBytes []byte, configBytes []byte, toEngine chan<- core.Message, fxs []*core.Fx, appSender core.AppSender) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx, chainCtx, dbManager, genesisBytes, upgradeBytes, configBytes, toEngine, fxs, appSender)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockVMMockRecorder) Initialize(ctx, chainCtx, dbManager, genesisBytes, upgradeBytes, configBytes, toEngine, fxs, appSender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockVM)(nil).Initialize), ctx, chainCtx, dbManager, genesisBytes, upgradeBytes, configBytes, toEngine, fxs, appSender)
}

// SetState mocks base method.
func (m *MockVM) SetState(ctx context.Context, state core.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetState indicates an expected call of SetState.
func (mr *MockVMMockRecorder) SetState(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockVM)(nil).SetState), ctx, state)
}

// Shutdown mocks base method.
func (m *MockVM) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockVMMockRecorder) Shutdown(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockVM)(nil).Shutdown), ctx)
}

// Version mocks base method.
func (m *MockVM) Version(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Version indicates an expected call of Version.
func (mr *MockVMMockRecorder) Version(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockVM)(nil).Version), ctx)
}

// CreateHandlers mocks base method.
func (m *MockVM) CreateHandlers(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHandlers", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHandlers indicates an expected call of CreateHandlers.
func (mr *MockVMMockRecorder) CreateHandlers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHandlers", reflect.TypeOf((*MockVM)(nil).CreateHandlers), ctx)
}

// CreateStaticHandlers mocks base method.
func (m *MockVM) CreateStaticHandlers(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStaticHandlers", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStaticHandlers indicates an expected call of CreateStaticHandlers.
func (mr *MockVMMockRecorder) CreateStaticHandlers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStaticHandlers", reflect.TypeOf((*MockVM)(nil).CreateStaticHandlers), ctx)
}

// Connected mocks base method.
func (m *MockVM) Connected(ctx context.Context, nodeID interface{}, nodeVersion interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connected", ctx, nodeID, nodeVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connected indicates an expected call of Connected.
func (mr *MockVMMockRecorder) Connected(ctx, nodeID, nodeVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connected", reflect.TypeOf((*MockVM)(nil).Connected), ctx, nodeID, nodeVersion)
}

// Disconnected mocks base method.
func (m *MockVM) Disconnected(ctx context.Context, nodeID interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnected", ctx, nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnected indicates an expected call of Disconnected.
func (mr *MockVMMockRecorder) Disconnected(ctx, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnected", reflect.TypeOf((*MockVM)(nil).Disconnected), ctx, nodeID)
}

// HealthCheck mocks base method.
func (m *MockVM) HealthCheck(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockVMMockRecorder) HealthCheck(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockVM)(nil).HealthCheck), ctx)
}

// AppRequest mocks base method.
func (m *MockVM) AppRequest(ctx context.Context, nodeID interface{}, requestID uint32, deadline interface{}, request []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppRequest", ctx, nodeID, requestID, deadline, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppRequest indicates an expected call of AppRequest.
func (mr *MockVMMockRecorder) AppRequest(ctx, nodeID, requestID, deadline, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppRequest", reflect.TypeOf((*MockVM)(nil).AppRequest), ctx, nodeID, requestID, deadline, request)
}

// AppRequestFailed mocks base method.
func (m *MockVM) AppRequestFailed(ctx context.Context, nodeID interface{}, requestID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppRequestFailed", ctx, nodeID, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppRequestFailed indicates an expected call of AppRequestFailed.
func (mr *MockVMMockRecorder) AppRequestFailed(ctx, nodeID, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppRequestFailed", reflect.TypeOf((*MockVM)(nil).AppRequestFailed), ctx, nodeID, requestID)
}

// AppResponse mocks base method.
func (m *MockVM) AppResponse(ctx context.Context, nodeID interface{}, requestID uint32, response []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppResponse", ctx, nodeID, requestID, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppResponse indicates an expected call of AppResponse.
func (mr *MockVMMockRecorder) AppResponse(ctx, nodeID, requestID, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppResponse", reflect.TypeOf((*MockVM)(nil).AppResponse), ctx, nodeID, requestID, response)
}

// AppGossip mocks base method.
func (m *MockVM) AppGossip(ctx context.Context, nodeID interface{}, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppGossip", ctx, nodeID, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppGossip indicates an expected call of AppGossip.
func (mr *MockVMMockRecorder) AppGossip(ctx, nodeID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppGossip", reflect.TypeOf((*MockVM)(nil).AppGossip), ctx, nodeID, msg)
}

// CrossChainAppRequest mocks base method.
func (m *MockVM) CrossChainAppRequest(ctx context.Context, chainID interface{}, requestID uint32, deadline interface{}, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CrossChainAppRequest", ctx, chainID, requestID, deadline, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CrossChainAppRequest indicates an expected call of CrossChainAppRequest.
func (mr *MockVMMockRecorder) CrossChainAppRequest(ctx, chainID, requestID, deadline, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CrossChainAppRequest", reflect.TypeOf((*MockVM)(nil).CrossChainAppRequest), ctx, chainID, requestID, deadline, msg)
}

// CrossChainAppRequestFailed mocks base method.
func (m *MockVM) CrossChainAppRequestFailed(ctx context.Context, chainID interface{}, requestID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CrossChainAppRequestFailed", ctx, chainID, requestID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CrossChainAppRequestFailed indicates an expected call of CrossChainAppRequestFailed.
func (mr *MockVMMockRecorder) CrossChainAppRequestFailed(ctx, chainID, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CrossChainAppRequestFailed", reflect.TypeOf((*MockVM)(nil).CrossChainAppRequestFailed), ctx, chainID, requestID)
}

// CrossChainAppResponse mocks base method.
func (m *MockVM) CrossChainAppResponse(ctx context.Context, chainID interface{}, requestID uint32, response []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CrossChainAppResponse", ctx, chainID, requestID, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// CrossChainAppResponse indicates an expected call of CrossChainAppResponse.
func (mr *MockVMMockRecorder) CrossChainAppResponse(ctx, chainID, requestID, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CrossChainAppResponse", reflect.TypeOf((*MockVM)(nil).CrossChainAppResponse), ctx, chainID, requestID, response)
}