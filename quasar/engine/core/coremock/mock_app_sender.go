// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luxfi/node/quasar/engine/core (interfaces: AppSender)

// Package coremock is a generated GoMock package.
package coremock

import (
	context "context"
	reflect "reflect"

	ids "github.com/luxfi/ids"
	gomock "go.uber.org/mock/gomock"
)

// MockAppSender is a mock of AppSender interface.
type MockAppSender struct {
	ctrl     *gomock.Controller
	recorder *MockAppSenderMockRecorder
}

// MockAppSenderMockRecorder is the mock recorder for MockAppSender.
type MockAppSenderMockRecorder struct {
	mock *MockAppSender
}

// NewMockAppSender creates a new mock instance.
func NewMockAppSender(ctrl *gomock.Controller) *MockAppSender {
	mock := &MockAppSender{ctrl: ctrl}
	mock.recorder = &MockAppSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppSender) EXPECT() *MockAppSenderMockRecorder {
	return m.recorder
}

// SendAppRequest mocks base method.
func (m *MockAppSender) SendAppRequest(ctx context.Context, nodeIDs []ids.NodeID, requestID uint32, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppRequest", ctx, nodeIDs, requestID, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAppRequest indicates an expected call of SendAppRequest.
func (mr *MockAppSenderMockRecorder) SendAppRequest(ctx, nodeIDs, requestID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppRequest", reflect.TypeOf((*MockAppSender)(nil).SendAppRequest), ctx, nodeIDs, requestID, msg)
}

// SendAppResponse mocks base method.
func (m *MockAppSender) SendAppResponse(ctx context.Context, nodeID ids.NodeID, requestID uint32, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppResponse", ctx, nodeID, requestID, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAppResponse indicates an expected call of SendAppResponse.
func (mr *MockAppSenderMockRecorder) SendAppResponse(ctx, nodeID, requestID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppResponse", reflect.TypeOf((*MockAppSender)(nil).SendAppResponse), ctx, nodeID, requestID, msg)
}

// SendAppError mocks base method.
func (m *MockAppSender) SendAppError(ctx context.Context, nodeID ids.NodeID, requestID uint32, errorCode int32, errorMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppError", ctx, nodeID, requestID, errorCode, errorMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAppError indicates an expected call of SendAppError.
func (mr *MockAppSenderMockRecorder) SendAppError(ctx, nodeID, requestID, errorCode, errorMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppError", reflect.TypeOf((*MockAppSender)(nil).SendAppError), ctx, nodeID, requestID, errorCode, errorMessage)
}

// SendAppGossip mocks base method.
func (m *MockAppSender) SendAppGossip(ctx context.Context, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppGossip", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAppGossip indicates an expected call of SendAppGossip.
func (mr *MockAppSenderMockRecorder) SendAppGossip(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppGossip", reflect.TypeOf((*MockAppSender)(nil).SendAppGossip), ctx, msg)
}

// SendCrossChainAppRequest mocks base method.
func (m *MockAppSender) SendCrossChainAppRequest(ctx context.Context, chainID ids.ID, requestID uint32, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCrossChainAppRequest", ctx, chainID, requestID, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCrossChainAppRequest indicates an expected call of SendCrossChainAppRequest.
func (mr *MockAppSenderMockRecorder) SendCrossChainAppRequest(ctx, chainID, requestID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCrossChainAppRequest", reflect.TypeOf((*MockAppSender)(nil).SendCrossChainAppRequest), ctx, chainID, requestID, msg)
}

// SendCrossChainAppResponse mocks base method.
func (m *MockAppSender) SendCrossChainAppResponse(ctx context.Context, chainID ids.ID, requestID uint32, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCrossChainAppResponse", ctx, chainID, requestID, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCrossChainAppResponse indicates an expected call of SendCrossChainAppResponse.
func (mr *MockAppSenderMockRecorder) SendCrossChainAppResponse(ctx, chainID, requestID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCrossChainAppResponse", reflect.TypeOf((*MockAppSender)(nil).SendCrossChainAppResponse), ctx, chainID, requestID, msg)
}