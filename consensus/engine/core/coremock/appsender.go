// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luxfi/node/consensus/engine/core (interfaces: AppSender)
//
// Generated by this command:
//
//	mockgen -package=coremock -destination=consensus/engine/core/coremock/appsender.go github.com/luxfi/node/consensus/engine/core AppSender
//

// Package coremock is a generated GoMock package.
package coremock

import (
	context "context"
	reflect "reflect"

	core "github.com/luxfi/node/consensus/engine/core"
	ids "github.com/luxfi/node/ids"
	set "github.com/luxfi/node/utils/set"
	gomock "go.uber.org/mock/gomock"
)

// MockAppSender is a mock of AppSender interface.
type MockAppSender struct {
	ctrl     *gomock.Controller
	recorder *MockAppSenderMockRecorder
}

// MockAppSenderMockRecorder is the mock recorder for MockAppSender.
type MockAppSenderMockRecorder struct {
	mock *MockAppSender
}

// NewMockAppSender creates a new mock instance.
func NewMockAppSender(ctrl *gomock.Controller) *MockAppSender {
	mock := &MockAppSender{ctrl: ctrl}
	mock.recorder = &MockAppSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppSender) EXPECT() *MockAppSenderMockRecorder {
	return m.recorder
}

// SendAppError mocks base method.
func (m *MockAppSender) SendAppError(arg0 context.Context, arg1 ids.NodeID, arg2 uint32, arg3 int32, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppError", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAppError indicates an expected call of SendAppError.
func (mr *MockAppSenderMockRecorder) SendAppError(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppError", reflect.TypeOf((*MockAppSender)(nil).SendAppError), arg0, arg1, arg2, arg3, arg4)
}

// SendAppGossip mocks base method.
func (m *MockAppSender) SendAppGossip(arg0 context.Context, arg1 core.SendConfig, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppGossip", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAppGossip indicates an expected call of SendAppGossip.
func (mr *MockAppSenderMockRecorder) SendAppGossip(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppGossip", reflect.TypeOf((*MockAppSender)(nil).SendAppGossip), arg0, arg1, arg2)
}

// SendAppRequest mocks base method.
func (m *MockAppSender) SendAppRequest(arg0 context.Context, arg1 set.Set[ids.NodeID], arg2 uint32, arg3 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAppRequest indicates an expected call of SendAppRequest.
func (mr *MockAppSenderMockRecorder) SendAppRequest(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppRequest", reflect.TypeOf((*MockAppSender)(nil).SendAppRequest), arg0, arg1, arg2, arg3)
}

// SendAppResponse mocks base method.
func (m *MockAppSender) SendAppResponse(arg0 context.Context, arg1 ids.NodeID, arg2 uint32, arg3 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAppResponse", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAppResponse indicates an expected call of SendAppResponse.
func (mr *MockAppSenderMockRecorder) SendAppResponse(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAppResponse", reflect.TypeOf((*MockAppSender)(nil).SendAppResponse), arg0, arg1, arg2, arg3)
}

// SendCrossChainAppError mocks base method.
func (m *MockAppSender) SendCrossChainAppError(arg0 context.Context, arg1 ids.ID, arg2 uint32, arg3 int32, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCrossChainAppError", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCrossChainAppError indicates an expected call of SendCrossChainAppError.
func (mr *MockAppSenderMockRecorder) SendCrossChainAppError(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCrossChainAppError", reflect.TypeOf((*MockAppSender)(nil).SendCrossChainAppError), arg0, arg1, arg2, arg3, arg4)
}

// SendCrossChainAppRequest mocks base method.
func (m *MockAppSender) SendCrossChainAppRequest(arg0 context.Context, arg1 ids.ID, arg2 uint32, arg3 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCrossChainAppRequest", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCrossChainAppRequest indicates an expected call of SendCrossChainAppRequest.
func (mr *MockAppSenderMockRecorder) SendCrossChainAppRequest(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCrossChainAppRequest", reflect.TypeOf((*MockAppSender)(nil).SendCrossChainAppRequest), arg0, arg1, arg2, arg3)
}

// SendCrossChainAppResponse mocks base method.
func (m *MockAppSender) SendCrossChainAppResponse(arg0 context.Context, arg1 ids.ID, arg2 uint32, arg3 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCrossChainAppResponse", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCrossChainAppResponse indicates an expected call of SendCrossChainAppResponse.
func (mr *MockAppSenderMockRecorder) SendCrossChainAppResponse(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCrossChainAppResponse", reflect.TypeOf((*MockAppSender)(nil).SendCrossChainAppResponse), arg0, arg1, arg2, arg3)
}