// Copyright (C) 2025, Lux Partners Limited. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luxfi/node/consensus/chain (interfaces: Consensus,Block)

package chainmock

import (
	"context"
	"reflect"

	gomock "go.uber.org/mock/gomock"
	ids "github.com/luxfi/ids"
	choices "github.com/luxfi/node/consensus/choices"
	chain "github.com/luxfi/node/consensus/chain"
)

// MockConsensus is a mock of Consensus interface.
type MockConsensus struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusMockRecorder
}

// MockConsensusMockRecorder is the mock recorder for MockConsensus.
type MockConsensusMockRecorder struct {
	mock *MockConsensus
}

// NewMockConsensus creates a new mock instance.
func NewMockConsensus(ctrl *gomock.Controller) *MockConsensus {
	mock := &MockConsensus{ctrl: ctrl}
	mock.recorder = &MockConsensusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsensus) EXPECT() *MockConsensusMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockConsensus) Add(ctx context.Context, block chain.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockConsensusMockRecorder) Add(ctx, block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockConsensus)(nil).Add), ctx, block)
}

// Decided mocks base method.
func (m *MockConsensus) Decided(blk chain.Block) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decided", blk)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Decided indicates an expected call of Decided.
func (mr *MockConsensusMockRecorder) Decided(blk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decided", reflect.TypeOf((*MockConsensus)(nil).Decided), blk)
}

// Finalized mocks base method.
func (m *MockConsensus) Finalized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finalized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Finalized indicates an expected call of Finalized.
func (mr *MockConsensusMockRecorder) Finalized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalized", reflect.TypeOf((*MockConsensus)(nil).Finalized))
}

// HealthCheck mocks base method.
func (m *MockConsensus) HealthCheck(ctx context.Context) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockConsensusMockRecorder) HealthCheck(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockConsensus)(nil).HealthCheck), ctx)
}

// Initialize mocks base method.
func (m *MockConsensus) Initialize(ctx context.Context, params chain.Parameters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockConsensusMockRecorder) Initialize(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockConsensus)(nil).Initialize), ctx, params)
}

// IsPreferred mocks base method.
func (m *MockConsensus) IsPreferred(blk chain.Block) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPreferred", blk)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPreferred indicates an expected call of IsPreferred.
func (mr *MockConsensusMockRecorder) IsPreferred(blk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPreferred", reflect.TypeOf((*MockConsensus)(nil).IsPreferred), blk)
}

// Issued mocks base method.
func (m *MockConsensus) Issued(blk chain.Block) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issued", blk)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Issued indicates an expected call of Issued.
func (mr *MockConsensusMockRecorder) Issued(blk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issued", reflect.TypeOf((*MockConsensus)(nil).Issued), blk)
}

// NumProcessing mocks base method.
func (m *MockConsensus) NumProcessing() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumProcessing")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumProcessing indicates an expected call of NumProcessing.
func (mr *MockConsensusMockRecorder) NumProcessing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumProcessing", reflect.TypeOf((*MockConsensus)(nil).NumProcessing))
}

// Parameters mocks base method.
func (m *MockConsensus) Parameters() chain.Parameters {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parameters")
	ret0, _ := ret[0].(chain.Parameters)
	return ret0
}

// Parameters indicates an expected call of Parameters.
func (mr *MockConsensusMockRecorder) Parameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parameters", reflect.TypeOf((*MockConsensus)(nil).Parameters))
}

// Preference mocks base method.
func (m *MockConsensus) Preference() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preference")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// Preference indicates an expected call of Preference.
func (mr *MockConsensusMockRecorder) Preference() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preference", reflect.TypeOf((*MockConsensus)(nil).Preference))
}

// Processing mocks base method.
func (m *MockConsensus) Processing(blkID ids.ID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Processing", blkID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Processing indicates an expected call of Processing.
func (mr *MockConsensusMockRecorder) Processing(blkID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Processing", reflect.TypeOf((*MockConsensus)(nil).Processing), blkID)
}

// RecordPoll mocks base method.
func (m *MockConsensus) RecordPoll(ctx context.Context, votes []ids.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordPoll", ctx, votes)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordPoll indicates an expected call of RecordPoll.
func (mr *MockConsensusMockRecorder) RecordPoll(ctx, votes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordPoll", reflect.TypeOf((*MockConsensus)(nil).RecordPoll), ctx, votes)
}

// MockBlock is a mock of Block interface.
type MockBlock struct {
	ctrl     *gomock.Controller
	recorder *MockBlockMockRecorder
}

// MockBlockMockRecorder is the mock recorder for MockBlock.
type MockBlockMockRecorder struct {
	mock *MockBlock
}

// NewMockBlock creates a new mock instance.
func NewMockBlock(ctrl *gomock.Controller) *MockBlock {
	mock := &MockBlock{ctrl: ctrl}
	mock.recorder = &MockBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlock) EXPECT() *MockBlockMockRecorder {
	return m.recorder
}

// Accept mocks base method.
func (m *MockBlock) Accept() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accept")
	ret0, _ := ret[0].(error)
	return ret0
}

// Accept indicates an expected call of Accept.
func (mr *MockBlockMockRecorder) Accept() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accept", reflect.TypeOf((*MockBlock)(nil).Accept))
}

// Bytes mocks base method.
func (m *MockBlock) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockBlockMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockBlock)(nil).Bytes))
}

// Height mocks base method.
func (m *MockBlock) Height() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Height indicates an expected call of Height.
func (mr *MockBlockMockRecorder) Height() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockBlock)(nil).Height))
}

// ID mocks base method.
func (m *MockBlock) ID() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockBlockMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockBlock)(nil).ID))
}

// Parent mocks base method.
func (m *MockBlock) Parent() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parent")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// Parent indicates an expected call of Parent.
func (mr *MockBlockMockRecorder) Parent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockBlock)(nil).Parent))
}

// Reject mocks base method.
func (m *MockBlock) Reject() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reject")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reject indicates an expected call of Reject.
func (mr *MockBlockMockRecorder) Reject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*MockBlock)(nil).Reject))
}

// Status mocks base method.
func (m *MockBlock) Status() choices.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(choices.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockBlockMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockBlock)(nil).Status))
}

// Time mocks base method.
func (m *MockBlock) Time() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Time indicates an expected call of Time.
func (mr *MockBlockMockRecorder) Time() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockBlock)(nil).Time))
}

// Verify mocks base method.
func (m *MockBlock) Verify(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockBlockMockRecorder) Verify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockBlock)(nil).Verify), arg0)
}