// Copyright (C) 2025, Lux Industries Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luxfi/node/consensus/uptime (interfaces: Calculator)

// Package uptimemock is a generated GoMock package.
package uptimemock

import (
	reflect "reflect"
	time "time"

	ids "github.com/luxfi/ids"
	gomock "go.uber.org/mock/gomock"
)

// MockCalculator is a mock of Calculator interface.
type MockCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatorMockRecorder
}

// MockCalculatorMockRecorder is the mock recorder for MockCalculator.
type MockCalculatorMockRecorder struct {
	mock *MockCalculator
}

// NewMockCalculator creates a new mock instance.
func NewMockCalculator(ctrl *gomock.Controller) *MockCalculator {
	mock := &MockCalculator{ctrl: ctrl}
	mock.recorder = &MockCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalculator) EXPECT() *MockCalculatorMockRecorder {
	return m.recorder
}

// CalculateUptime mocks base method.
func (m *MockCalculator) CalculateUptime(nodeID ids.NodeID, startTime time.Time) (time.Duration, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateUptime", nodeID, startTime)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CalculateUptime indicates an expected call of CalculateUptime.
func (mr *MockCalculatorMockRecorder) CalculateUptime(nodeID, startTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateUptime", reflect.TypeOf((*MockCalculator)(nil).CalculateUptime), nodeID, startTime)
}

// CalculateUptimePercent mocks base method.
func (m *MockCalculator) CalculateUptimePercent(nodeID ids.NodeID, startTime time.Time) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateUptimePercent", nodeID, startTime)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateUptimePercent indicates an expected call of CalculateUptimePercent.
func (mr *MockCalculatorMockRecorder) CalculateUptimePercent(nodeID, startTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateUptimePercent", reflect.TypeOf((*MockCalculator)(nil).CalculateUptimePercent), nodeID, startTime)
}

// SetCalculator mocks base method.
func (m *MockCalculator) SetCalculator(nodeID ids.NodeID, calculator interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCalculator", nodeID, calculator)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCalculator indicates an expected call of SetCalculator.
func (mr *MockCalculatorMockRecorder) SetCalculator(nodeID, calculator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCalculator", reflect.TypeOf((*MockCalculator)(nil).SetCalculator), nodeID, calculator)
}