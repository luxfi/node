// Copyright (C) 2025, Lux Industries Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luxfi/node/consensus/networking/router (interfaces: ExternalRouter)

// Package routermock is a generated GoMock package.
package routermock

import (
	context "context"
	reflect "reflect"
	time "time"

	ids "github.com/luxfi/ids"
	gomock "go.uber.org/mock/gomock"
)

// MockExternalRouter is a mock of ExternalRouter interface.
type MockExternalRouter struct {
	ctrl     *gomock.Controller
	recorder *MockExternalRouterMockRecorder
}

// MockExternalRouterMockRecorder is the mock recorder for MockExternalRouter.
type MockExternalRouterMockRecorder struct {
	mock *MockExternalRouter
}

// NewMockExternalRouter creates a new mock instance.
func NewMockExternalRouter(ctrl *gomock.Controller) *MockExternalRouter {
	mock := &MockExternalRouter{ctrl: ctrl}
	mock.recorder = &MockExternalRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalRouter) EXPECT() *MockExternalRouterMockRecorder {
	return m.recorder
}

// RegisterRequest mocks base method.
func (m *MockExternalRouter) RegisterRequest(ctx context.Context, nodeID ids.NodeID, requestID uint32, op interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterRequest", ctx, nodeID, requestID, op)
}

// RegisterRequest indicates an expected call of RegisterRequest.
func (mr *MockExternalRouterMockRecorder) RegisterRequest(ctx, nodeID, requestID, op interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRequest", reflect.TypeOf((*MockExternalRouter)(nil).RegisterRequest), ctx, nodeID, requestID, op)
}

// RegisterTimeout mocks base method.
func (m *MockExternalRouter) RegisterTimeout(duration time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterTimeout", duration)
}

// RegisterTimeout indicates an expected call of RegisterTimeout.
func (mr *MockExternalRouterMockRecorder) RegisterTimeout(duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTimeout", reflect.TypeOf((*MockExternalRouter)(nil).RegisterTimeout), duration)
}

// Unbenched mocks base method.
func (m *MockExternalRouter) Unbenched(chainID ids.ID, nodeID ids.NodeID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unbenched", chainID, nodeID)
}

// Unbenched indicates an expected call of Unbenched.
func (mr *MockExternalRouterMockRecorder) Unbenched(chainID, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unbenched", reflect.TypeOf((*MockExternalRouter)(nil).Unbenched), chainID, nodeID)
}

// Benched mocks base method.
func (m *MockExternalRouter) Benched(chainID ids.ID, nodeID ids.NodeID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Benched", chainID, nodeID)
}

// Benched indicates an expected call of Benched.
func (mr *MockExternalRouterMockRecorder) Benched(chainID, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Benched", reflect.TypeOf((*MockExternalRouter)(nil).Benched), chainID, nodeID)
}

// Connected mocks base method.
func (m *MockExternalRouter) Connected(nodeID ids.NodeID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connected", nodeID)
}

// Connected indicates an expected call of Connected.
func (mr *MockExternalRouterMockRecorder) Connected(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connected", reflect.TypeOf((*MockExternalRouter)(nil).Connected), nodeID)
}

// Disconnected mocks base method.
func (m *MockExternalRouter) Disconnected(nodeID ids.NodeID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnected", nodeID)
}

// Disconnected indicates an expected call of Disconnected.
func (mr *MockExternalRouterMockRecorder) Disconnected(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnected", reflect.TypeOf((*MockExternalRouter)(nil).Disconnected), nodeID)
}